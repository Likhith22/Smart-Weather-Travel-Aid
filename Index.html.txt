!DOCTYPE html
html lang=en
head
  meta charset=UTF-8 
  meta name=viewport content=width=device-width, initial-scale=1.0 
  titleSmart Weather Travel Aidtitle
  style
    body {
      font-family Arial, sans-serif;
      padding 20px;
      background #f0f8ff;
    }
    h1 {
      text-align center;
    }
    #canvas {
      border 1px solid #000;
      display block;
      margin 20px auto;
    }
    #status {
      text-align center;
      margin-top 10px;
    }
  style
head
body
  h1Smart Weather Travel Aidh1
  canvas id=canvas width=400 height=200canvas
  div id=statusDetecting location...div

  script
     --- Geolocation API ---
    const status = document.getElementById('status');
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async (position) = {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        status.textContent = `Your location Latitude ${lat.toFixed(2)}, Longitude ${lon.toFixed(2)}`;

         Fetch weather data (using open-meteo free weather API - no key required)
        const res = await fetch(`httpsapi.open-meteo.comv1forecastlatitude=${lat}&longitude=${lon}&current_weather=true`);
        const data = await res.json();
        const weather = data.current_weather;
        drawWeather(weather);

      }, () = {
        status.textContent = Permission denied for location.;
      });
    } else {
      status.textContent = Geolocation is not supported.;
    }

     --- Canvas API ---
    function drawWeather(weather) {
      const canvas = document.getElementById('canvas');
      const ctx = canvas.getContext('2d');

      ctx.fillStyle = '#87ceeb';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      ctx.fillStyle = '#000';
      ctx.font = '16px Arial';
      ctx.fillText(`Temperature ${weather.temperature} Â°C`, 20, 40);
      ctx.fillText(`Wind Speed ${weather.windspeed} kmh`, 20, 70);
      ctx.fillText(`Weather Code ${weather.weathercode}`, 20, 100);
    }

     --- Intersection Observer API ---
    const observer = new IntersectionObserver((entries) = {
      entries.forEach(entry = {
        if (entry.isIntersecting) {
          console.log('Canvas in view consider downloading or interacting');
        }
      });
    });
    observer.observe(document.getElementById('canvas'));

     --- Network Information API ---
    const connection = navigator.connection  navigator.mozConnection  navigator.webkitConnection;
    if (connection) {
      status.innerHTML += `brNetwork type ${connection.effectiveType}`;
      connection.addEventListener('change', () = {
        alert('Network type changed to ' + connection.effectiveType);
      });
    }

     --- Background Task API (simulated) ---
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() = {
        console.log('Idle time You can sync data in background here');
      });
    }
  script
body
html
